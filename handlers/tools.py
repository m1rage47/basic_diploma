from telebot.apihelper import ApiHTTPException, ApiTelegramException

from db_operations import add_to_history
from keyboards import list_keyboard, movie_limit_markup
from loader import bot
from states import CommonStates


# ------------------------------------ –£–Ω–∏–≤–µ—Ä—Å–∞–ª ------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
def msg_generator(film):
    title = film.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    en_name = film.get("alternativeName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    year = film.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    rating_kp = round(film.get("rating", {}).get("kp", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    rating_imdb = round(film.get("rating", {}).get("imdb", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    description = film.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    genres = film.get("genres", [])
    genres_list = ", ".join([g["name"] for g in genres]) if genres else "‚Äî"
    age_rating = film.get("ageRating", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    budget = film.get("budget", {}).get("value", "‚Äî")
    currency = film.get("budget", {}).get("currency", "‚Äî")

    msg = (
        f"üé¨ *{title}* ({year})\n\n"
        f"üá∫üá∏ *–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {en_name}\n"
        f"üí∞ *–ë—é–¥–∂–µ—Ç:* {budget}{currency}\n"
        f"üé≠ *–ñ–∞–Ω—Ä—ã:* {genres_list}\n"
        f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {age_rating}+\n"
        f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
        f"   ‚îî üìä *–ö–∏–Ω–æ–ø–æ–∏—Å–∫:* {rating_kp}\n"
        f"   ‚îî üåç *IMDB:* {rating_imdb}\n"
        f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}"
    )

    return msg


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–º–∏—Ç–∞
@bot.callback_query_handler(
    func=lambda call: call.data.startswith("set_limit_"), state="*"
)
def handle_set_limit_fsm(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id, text="–ü—Ä–∏–Ω—è—Ç–æ!")

    try:
        selected_limit = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        bot.send_message(
            chat_id,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        bot.delete_state(user_id, chat_id)
        return

    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –¢–µ–ø–µ—Ä—å 'final_candidates' –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∏–ª—å–º—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏—Ö –Ω–∞—à–ª–∞
        movies_to_display = state_data.get("final_candidates", [])

        if not movies_to_display:
            bot.send_message(
                chat_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
            )
            bot.delete_state(user_id, chat_id)
            return

        display_movies = movies_to_display[:selected_limit]

        if not display_movies:
            bot.send_message(
                chat_id,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ª–∏–º–∏—Ç—É.",
            )
            bot.delete_state(user_id, chat_id)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
        send_movie_list_and_ask_selection(chat_id, user_id, display_movies)


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@bot.callback_query_handler(
    func=lambda call: call.data.startswith("select_movie_index_"), state="*"
)  # –°—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–û–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è
def handle_movie_selection_fsm(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)  # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫

    try:
        selected_index = int(call.data.split("_")[3])
    except (IndexError, ValueError) as e:
        bot.send_message(
            chat_id,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        bot.delete_state(user_id, chat_id)
        return

    with bot.retrieve_data(user_id, chat_id) as data:
        films = data.get(
            "current_movie_list"
        )  # –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞

        if not films or selected_index >= len(films):
            bot.send_message(
                chat_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã–±–æ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            )
            bot.delete_state(user_id, chat_id)
            return

        film = films[selected_index]
        poster = film.get("poster", {}).get("url", "‚Äî")
        msg = msg_generator(film)

        try:
            bot.send_photo(chat_id, photo=poster, caption=msg, parse_mode="Markdown")
            bot.answer_callback_query(
                call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}"
            )
            add_to_history(user_id, film)
        except ApiHTTPException:
            bot.answer_callback_query(
                call.id,
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}\n"
                f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä",
            )
            bot.send_message(chat_id, msg, parse_mode="Markdown")
        finally:
            bot.delete_state(
                user_id, chat_id
            )  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞


# –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
def send_movie_list_and_ask_selection(chat_id, user_id, movies_to_display):
    if not movies_to_display:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç.")
        bot.delete_state(user_id, chat_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
    with bot.retrieve_data(user_id, chat_id) as state_data:
        state_data["current_movie_list"] = movies_to_display

    text = "\n".join(
        [
            f"{i+1}. {film['name']} ({film.get('year', '‚Äî')})"
            for i, film in enumerate(movies_to_display)
        ]
    )
    # –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ—Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –æ–∂–∏–¥–∞–µ—à—å –≤ handle_movie_selection_fsm
    markup = list_keyboard(
        movies_to_display, "select_movie_index_"
    )  # –ò–∑–º–µ–Ω–∏–ª –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
    bot.send_message(chat_id, text, reply_markup=markup)


@bot.message_handler(state=CommonStates.waiting_for_genre_name)
def filter_movies_by_genre(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    input_genre = message.text.strip().lower()

    with bot.retrieve_data(user_id, chat_id) as state_data:
        found_movies = state_data.get("found_movies", [])

        if not found_movies:
            bot.send_message(
                chat_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            )
            bot.delete_state(user_id, chat_id)
            return

        if input_genre == "-":
            bot.send_message(
                chat_id,
                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ 10 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
            )
            movie = found_movies[0]
            poster = movie.get("poster", {}).get("url", "‚Äî")
            msg = msg_generator(movie)
            try:
                bot.send_photo(
                    chat_id, photo=poster, caption=msg, parse_mode="Markdown"
                )
            except ApiTelegramException:
                bot.reply_to(chat_id, msg, parse_mode="Markdown")

            add_to_history(user_id, movie)
            bot.delete_state(user_id, chat_id)
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä—É
        filtered_movies = []
        for movie in found_movies:
            genres = movie.get("genres", [])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä –≤ —Å–ø–∏—Å–∫–µ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞
            if any(g.get("name", "").lower() == input_genre for g in genres):
                filtered_movies.append(movie)

        if filtered_movies:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            state_data["current_movie_list"] = (
                filtered_movies  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –≤—ã–±–æ—Ä–∞
            )

            message_text = (
                f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_movies)} —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ {input_genre}"
            )

            state_data["final_candidates"] = filtered_movies

            markup = movie_limit_markup()
            bot.send_message(
                chat_id,
                f"{message_text}\n–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?",
                reply_markup=markup,
            )
            bot.set_state(user_id, CommonStates.waiting_for_limit, chat_id)
        else:
            bot.send_message(
                chat_id,
                f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ '{input_genre}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            )
            bot.delete_state(user_id, chat_id)


def filter_or_not(films, chat_id, user_id):
    if len(films) > 1:
        bot.send_message(
            chat_id,
            f"–ù–∞–π–¥–µ–Ω–æ {len(films)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
            "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∂–∞–Ω—Ä—É? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' –∏–ª–∏ '–∫–æ–º–µ–¥–∏—è').\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º.",
        )
        bot.set_state(user_id, CommonStates.waiting_for_genre_name, chat_id)
    else:
        movie = films[0]
        poster = movie.get("poster", {}).get("url", "‚Äî")
        msg = msg_generator(movie)
        try:
            bot.send_photo(chat_id, photo=poster, caption=msg, parse_mode="Markdown")
        except ApiTelegramException:
            bot.reply_to(chat_id, msg, parse_mode="Markdown")

        add_to_history(user_id, movie)
        bot.delete_state(user_id, chat_id)


# -----------------------------------------------------------------------------------
