from api import requester
from handlers.tools import filter_or_not
from keyboards import choose_system_keyboard
from loader import bot
from states import RatingSearchStates


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /movie_by_rating –∏ –≤—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã
@bot.message_handler(commands=["movie_by_rating"])
def handle_movie_by_rating(message):
    markup = choose_system_keyboard()
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è:", reply_markup=markup
    )


# –ö–æ–ª–±—ç–∫-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in ["rating_kp", "rating_imdb"])
def rating_callback_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    with bot.retrieve_data(user_id, chat_id) as data:
        data["rating_type"] = call.data

    if call.data == "rating_kp":
        bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Kinopoisk. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ üîç")
        bot.set_state(user_id, RatingSearchStates.waiting_for_rating_value_kp, chat_id)
    elif call.data == "rating_imdb":
        bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ IMDB. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ üîç")
        bot.set_state(
            user_id, RatingSearchStates.waiting_for_rating_value_imdb, chat_id
        )


# –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 10 —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è kp
@bot.message_handler(state=RatingSearchStates.waiting_for_rating_value_kp)
def fetch_movies_by_kp_rating(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        rating = float(message.text)
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.1)."
        )
        return

    params = {
        "sortField": "rating.kp",
        "sortType": 1,
        "rating.kp": f"{rating}-10",
    }
    data = requester(False, params)
    films = data["docs"]
    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        state_data["found_movies"] = films

    if "docs" in data and data["docs"]:
        filter_or_not(films, chat_id, user_id)
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(chat_id, msg, parse_mode="Markdown")
        bot.delete_state(user_id, chat_id)


# –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 10 —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è imdb
@bot.message_handler(state=RatingSearchStates.waiting_for_rating_value_imdb)
def fetch_movies_by_imdb_rating(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        rating = float(message.text)
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.1)."
        )
        return

    params = {
        "sortField": "rating.imdb",
        "sortType": 1,
        "rating.imdb": f"{rating}-10",
    }
    data = requester(False, params)
    films = data["docs"]
    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        state_data["found_movies"] = films

    if "docs" in data and data["docs"]:
        filter_or_not(films, chat_id, user_id)
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(chat_id, msg, parse_mode="Markdown")
        bot.delete_state(user_id, chat_id)
