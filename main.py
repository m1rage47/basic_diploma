from datetime import datetime
from urllib.parse import quote

import requests
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import sessionmaker
from telebot import types
from telebot.apihelper import ApiTelegramException
from telebot.handler_backends import State, StatesGroup

from config import API_KEY, BASE_URL, DEFAULT_COMMANDS
from loader import bot
from model import Users, UsersHistory, engine


def set_default_commands(bot):
    bot.set_my_commands([types.BotCommand(*i) for i in DEFAULT_COMMANDS])


class CommandStates(StatesGroup):
    movie_search = State()
    movie_by_rating = State()
    low_budget_movie = State()
    high_budget_movie = State()
    history = State()


headers = {"accept": "application/json", "X-API-KEY": API_KEY}
Session = sessionmaker(bind=engine)
session = Session()


@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "–≥–æ—Å—Ç—å"
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    new_record = Users(
        users_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
    )

    try:
        session.add(new_record)
        session.commit()
        welcome = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã, {username}\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∫–∏–Ω–æ–ø–æ–∏—Å–∫üé¨\n"
            f"–¢—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—ë–º –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–µ –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã üö´\n"
            f"–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å üîç"
        )
    except IntegrityError:
        session.rollback()
        welcome = f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å, {username}!"

    bot.send_message(message.chat.id, welcome)
    set_default_commands(bot)


@bot.message_handler(commands=["movie_search"])
def handle_movie_search(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    bot.register_next_step_handler(message, movie_searcher)


def movie_searcher(message):
    user_id = message.from_user.id
    movie_name = message.text.strip()

    response = requests.get(
        f"{BASE_URL}/movie/search?page=1&limit=10&query={quote(movie_name)}",
        headers=headers,
    )
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    data = response.json()

    if "docs" in data and data["docs"]:
        movie = data["docs"][0]
        poster = movie.get("poster", {}).get("url", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        title = movie.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        en_name = movie.get("alternativeName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        year = movie.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        rating_kp = round(movie.get("rating", {}).get("kp", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
        rating_imdb = round(movie.get("rating", {}).get("imdb", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
        description = movie.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        genres = movie.get("genres", [])
        genres_list = ", ".join([g["name"] for g in genres]) if genres else "‚Äî"
        age_rating = movie.get("ageRating", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        msg = (
            f"üé¨ *{title}* ({year})\n\n"
            f"üá∫üá∏ *–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {en_name}\n"
            f"üé≠ *–ñ–∞–Ω—Ä—ã:* {genres_list}\n"
            f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {age_rating}+\n"
            f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
            f"   ‚îî üìä *–ö–∏–Ω–æ–ø–æ–∏—Å–∫:* {rating_kp}\n"
            f"   ‚îî üåç *IMDB:* {rating_imdb}\n"
            f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}"
        )
        try:
            bot.send_photo(
                message.chat.id, photo=poster, caption=msg, parse_mode="Markdown"
            )
        except ApiTelegramException:
            bot.reply_to(message.chat.id, msg, parse_mode="Markdown")
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(message.chat.id, msg, parse_mode="Markdown")

    new_record = UsersHistory(
        users_id=user_id,
        title=title,
        description=description[:1000],
        rating_kp=rating_kp,
        rating_imdb=rating_imdb,
        year=year,
        genres=genres_list,
        age_rate=age_rating,
        poster=poster,
    )

    session.add(new_record)
    session.commit()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /movie_by_rating –∏ –≤—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã
@bot.message_handler(commands=["movie_by_rating"])
def handle_movie_by_rating(message):
    markup = types.InlineKeyboardMarkup()
    btn_kp = types.InlineKeyboardButton("Kinopoisk", callback_data="rating_kp")
    btn_imdb = types.InlineKeyboardButton("IMDB", callback_data="rating_imdb")
    markup.add(btn_kp, btn_imdb)

    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è:", reply_markup=markup
    )


# –ö–æ–ª–±—ç–∫-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in ["rating_kp", "rating_imdb"])
def rating_callback_handler(call):
    if call.data == "rating_kp":
        m_by_kp(call)
    elif call.data == "rating_imdb":
        m_by_imdb(call)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ Kinopoisk
def m_by_kp(call):
    bot.answer_callback_query(call.id)
    bot.send_message(
        call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Kinopoisk. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ üîç"
    )
    bot.register_next_step_handler(call.message, fetch_movies_by_kp_rating)


user_movies = {}


# –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 10 —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è kp
def fetch_movies_by_kp_rating(message):
    try:
        rating = float(message.text)
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.1)."
        )
        return

    response = requests.get(
        f"{BASE_URL}/movie?page=1&limit=10&selectFields=name&selectFields=ageRating&selectFields=poster&selectFields=year&selectFields=enName&selectFields=rating&selectFields=description&selectFields=genres&notNullFields=description&notNullFields=enName&notNullFields=rating.kp&sortField=rating.kp&sortType=1&rating.kp={rating}-10",
        headers=headers,
    )
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    data = response.json()
    films = data["docs"]
    user_movies[message.chat.id] = films  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    text = "\n".join(
        [
            f"{i+1}. {film['name']} ({film.get('year', '‚Äî')})"
            for i, film in enumerate(films)
        ]
    )

    markup = types.InlineKeyboardMarkup(row_width=5)
    buttons = [
        types.InlineKeyboardButton(text=str(i + 1), callback_data=f"movie_{i}")
        for i in range(len(films))
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 5 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 5):
        markup.add(*buttons[i : i + 5])

    bot.send_message(message.chat.id, text, reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ IMDB
def m_by_imdb(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ IMDB. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ üîç")
    bot.register_next_step_handler(call.message, fetch_movies_by_imdb_rating)


# –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 10 —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è imdb
def fetch_movies_by_imdb_rating(message):
    try:
        rating = float(message.text)
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.1)."
        )
        return

    response = requests.get(
        f"{BASE_URL}/movie?page=1&limit=10&selectFields=name&selectFields=ageRating&selectFields=poster&selectFields=year&selectFields=enName&selectFields=rating&selectFields=description&selectFields=genres&notNullFields=description&notNullFields=enName&notNullFields=rating.imdb&sortField=rating.imdb&sortType=1&rating.imdb={rating}-10",
        headers=headers,
    )

    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    data = response.json()
    films = data["docs"]
    user_movies[message.chat.id] = films  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    text = "\n".join(
        [
            f"{i+1}. {film['name']} ({film.get('year', '‚Äî')})"
            for i, film in enumerate(films)
        ]
    )

    markup = types.InlineKeyboardMarkup(row_width=5)
    buttons = [
        types.InlineKeyboardButton(text=str(i + 1), callback_data=f"movie_{i}")
        for i in range(len(films))
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 5 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 5):
        markup.add(*buttons[i : i + 5])

    bot.send_message(message.chat.id, text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("movie_"))
def handle_movie_selection(call):
    selected_index = int(call.data.split("_")[1])
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    films = user_movies.get(chat_id)
    if not films or selected_index >= len(films):
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    film = films[selected_index]

    poster = film.get("poster", {}).get("url", "‚Äî")
    title = film.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    en_name = film.get("alternativeName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    year = film.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    rating_kp = round(film.get("rating", {}).get("kp", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    rating_imdb = round(film.get("rating", {}).get("imdb", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    description = film.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    genres = film.get("genres", [])
    genres_list = ", ".join([g["name"] for g in genres]) if genres else "‚Äî"
    age_rating = film.get("ageRating", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    msg = (
        f"üé¨ *{title}* ({year})\n\n"
        f"üá∫üá∏ *–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {en_name}\n"
        f"üé≠ *–ñ–∞–Ω—Ä—ã:* {genres_list}\n"
        f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {age_rating}+\n"
        f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
        f"   ‚îî üìä *–ö–∏–Ω–æ–ø–æ–∏—Å–∫:* {rating_kp}\n"
        f"   ‚îî üåç *IMDB:* {rating_imdb}\n"
        f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}"
    )

    new_record = UsersHistory(
        users_id=user_id,
        title=title,
        description=description[:1000],  # –µ—Å–ª–∏ –≤—Å—ë –∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –µ—Å—Ç—å
        rating_kp=rating_kp,
        rating_imdb=rating_imdb,
        year=year,
        genres=genres_list,
        age_rate=age_rating,
        poster=poster,
    )

    session.add(new_record)
    session.commit()
    try:
        bot.send_photo(chat_id, photo=poster, caption=msg, parse_mode="Markdown")
        bot.answer_callback_query(
            call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}"
        )
    except ApiTelegramException:
        bot.answer_callback_query(
            call.id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}\n"
            f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä",
        )
        bot.send_message(chat_id, msg, parse_mode="Markdown")


@bot.message_handler(commands=["low_budget_movie"])
def handle_low_budget_movie(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç:")
    bot.register_next_step_handler(message, low_budget_movie)


budget_movies = {}


def low_budget_movie(message):
    try:
        budget = int(message.text)
        if budget < 1000 or budget > 6666666:
            bot.send_message(
                message.chat.id, "–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1000-6666666"
            )
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6000)."
        )
        return

    response = requests.get(
        f"{BASE_URL}/movie?page=1&limit=10&selectFields=name&selectFields=ageRating&selectFields=poster&selectFields=enName&selectFields=year&selectFields=description&selectFields=rating&selectFields=budget&selectFields=genres&notNullFields=name&notNullFields=enName&notNullFields=description&notNullFields=rating.kp&notNullFields=rating.imdb&notNullFields=year&notNullFields=budget.value&sortField=budget.value&sortType=-1&budget.value=1000-{budget}",
        headers=headers,
    )

    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    data = response.json()
    films = data["docs"]
    budget_movies[message.chat.id] = films  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    text = "\n".join(
        [
            f"{i + 1}. {film['name']} ({film.get('year', '‚Äî')})"
            for i, film in enumerate(films)
        ]
    )

    markup = types.InlineKeyboardMarkup(row_width=5)
    buttons = [
        types.InlineKeyboardButton(text=str(i + 1), callback_data=f"budget_movie_{i}")
        for i in range(len(films))
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 5 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 5):
        markup.add(*buttons[i : i + 5])

    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=["high_budget_movie"])
def handle_high_budget_movie(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç:")
    bot.register_next_step_handler(message, high_budget_movie)


def high_budget_movie(message):
    try:
        budget = int(message.text)
        if budget < 1000 or budget > 6666666:
            bot.send_message(
                message.chat.id, "–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1000-6666666"
            )
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6000)."
        )
        return

    response = requests.get(
        f"{BASE_URL}/movie?page=1&limit=10&selectFields=name&selectFields=ageRating&selectFields=poster&selectFields=enName&selectFields=year&selectFields=description&selectFields=rating&selectFields=budget&selectFields=genres&notNullFields=name&notNullFields=enName&notNullFields=description&notNullFields=rating.kp&notNullFields=rating.imdb&notNullFields=year&notNullFields=budget.value&sortField=budget.value&sortType=-1&budget.value={budget}-6666666",
        headers=headers,
    )

    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    data = response.json()
    films = data["docs"]
    budget_movies[message.chat.id] = films  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    text = "\n".join(
        [
            f"{i + 1}. {film['name']} ({film.get('year', '‚Äî')})"
            for i, film in enumerate(films)
        ]
    )

    markup = types.InlineKeyboardMarkup(row_width=5)
    buttons = [
        types.InlineKeyboardButton(text=str(i + 1), callback_data=f"budget_movie_{i}")
        for i in range(len(films))
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 5 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 5):
        markup.add(*buttons[i : i + 5])

    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("budget_movie_"))
def handle_budget_movie_selection(call):
    try:
        selected_index = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    films = budget_movies.get(chat_id)
    if not films or selected_index >= len(films):
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    film = films[selected_index]

    poster = film.get("poster", {}).get("url", "‚Äî")
    title = film.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    en_name = film.get("alternativeName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    year = film.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    rating_kp = round(film.get("rating", {}).get("kp", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    rating_imdb = round(film.get("rating", {}).get("imdb", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    description = film.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    genres = film.get("genres", [])
    genres_list = ", ".join([g["name"] for g in genres]) if genres else "‚Äî"
    age_rating = film.get("ageRating", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    budget = film.get("budget", {}).get("value", "‚Äî")
    currency = film.get("budget", {}).get("currency", "‚Äî")

    msg = (
        f"üé¨ *{title}* ({year})\n\n"
        f"üá∫üá∏ *–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {en_name}\n"
        f"üí∞ *–ë—é–¥–∂–µ—Ç:* {budget}{currency}\n"
        f"üé≠ *–ñ–∞–Ω—Ä—ã:* {genres_list}\n"
        f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {age_rating}+\n"
        f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
        f"   ‚îî üìä *–ö–∏–Ω–æ–ø–æ–∏—Å–∫:* {rating_kp}\n"
        f"   ‚îî üåç *IMDB:* {rating_imdb}\n"
        f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}"
    )
    new_record = UsersHistory(
        users_id=user_id,
        title=title,
        description=description[:1000],  # –µ—Å–ª–∏ –≤—Å—ë –∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –µ—Å—Ç—å
        rating_kp=rating_kp,
        rating_imdb=rating_imdb,
        year=year,
        genres=genres_list,
        age_rate=age_rating,
        poster=poster,
    )

    session.add(new_record)
    session.commit()
    try:
        bot.send_photo(chat_id, photo=poster, caption=msg, parse_mode="Markdown")
        bot.answer_callback_query(
            call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}"
        )
    except ApiTelegramException:
        bot.answer_callback_query(
            call.id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}\n"
            f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä",
        )
        bot.send_message(chat_id, msg, parse_mode="Markdown")


history_data = {}


@bot.message_handler(commands=["history"])
def handle_history_command(message):
    user_id = message.from_user.id

    history = (
        session.query(UsersHistory)
        .filter_by(users_id=user_id)
        .order_by(UsersHistory.data.desc())
        .limit(10)
        .all()
    )

    if not history:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ chat_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    history_data[message.chat.id] = history

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
    text_lines = []
    for i, record in enumerate(history, start=1):
        text_lines.append(
            f"–ó–∞–ø—Ä–æ—Å –æ—Ç {record.data.strftime('%Y-%m-%d %H:%M')}\n"
            f"{i}. {record.title} ({record.year})"
        )
    text = "\n\n".join(text_lines)

    # –ö–Ω–æ–ø–∫–∏ –æ—Ç 1 –¥–æ 10
    markup = types.InlineKeyboardMarkup(row_width=5)
    buttons = [
        types.InlineKeyboardButton(text=str(i + 1), callback_data=f"history_movie_{i}")
        for i in range(len(history))
    ]
    for i in range(0, len(buttons), 5):
        markup.add(*buttons[i : i + 5])

    bot.send_message(
        message.chat.id,
        f"üìú *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n{text}",
        parse_mode="Markdown",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("history_movie_"))
def handle_history_movie_detail(call):
    chat_id = call.message.chat.id
    try:
        index = int(call.data.split("_")[-1])
        selected_record = history_data.get(chat_id, [])[index]
    except (IndexError, ValueError, TypeError):
        bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.")
        return

    msg = (
        f"üóì *{selected_record.data.strftime('%Y-%m-%d %H:%M')}*\n"
        f"üé¨ *{selected_record.title}* ({selected_record.year})\n\n"
        f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{selected_record.description}\n\n"
        f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
        f"   ‚îî –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {selected_record.rating_kp or '‚Äî'}\n"
        f"   ‚îî IMDB: {selected_record.rating_imdb or '‚Äî'}\n"
        f"üé≠ *–ñ–∞–Ω—Ä—ã:* {selected_record.genres or '‚Äî'}\n"
        f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {selected_record.age_rate or '‚Äî'}"
    )

    try:
        bot.send_photo(
            chat_id, photo=selected_record.poster, caption=msg, parse_mode="Markdown"
        )
    except ApiTelegramException as e:
        bot.send_message(chat_id, msg, parse_mode="Markdown")

    bot.answer_callback_query(call.id)


@bot.message_handler(commands=["help"])
def handle_help(message):
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:")
    bot.send_message(
        message.chat.id, "\n".join(f"{cmd} ‚Äî {desc}" for cmd, desc in DEFAULT_COMMANDS)
    )


if __name__ == "__main__":

    set_default_commands(bot)
    bot.infinity_polling()
