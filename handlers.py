from telebot.apihelper import ApiTelegramException, ApiHTTPException

from api import requester
from config import DEFAULT_COMMANDS
from db_operations import add_to_history, add_user, show_history
from keyboards import choose_system_keyboard, list_keyboard, movie_limit_markup
from loader import bot, set_default_commands
from states import MovieSearchStates, RatingSearchStates, BudgetSearchStates, HistoryStates, CommonStates, history_data

# ------------------------------------ –£–Ω–∏–≤–µ—Ä—Å–∞–ª ------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
def msg_generator(film):
    title = film.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    en_name = film.get("alternativeName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    year = film.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    rating_kp = round(film.get("rating", {}).get("kp", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    rating_imdb = round(film.get("rating", {}).get("imdb", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"), 1)
    description = film.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    genres = film.get("genres", [])
    genres_list = ", ".join([g["name"] for g in genres]) if genres else "‚Äî"
    age_rating = film.get("ageRating", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    budget = film.get("budget", {}).get("value", "‚Äî")
    currency = film.get("budget", {}).get("currency", "‚Äî")

    msg = (
        f"üé¨ *{title}* ({year})\n\n"
        f"üá∫üá∏ *–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {en_name}\n"
        f"üí∞ *–ë—é–¥–∂–µ—Ç:* {budget}{currency}\n"
        f"üé≠ *–ñ–∞–Ω—Ä—ã:* {genres_list}\n"
        f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {age_rating}+\n"
        f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
        f"   ‚îî üìä *–ö–∏–Ω–æ–ø–æ–∏—Å–∫:* {rating_kp}\n"
        f"   ‚îî üåç *IMDB:* {rating_imdb}\n"
        f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}"
    )

    return msg

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–º–∏—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("set_limit_"), state="*")
def handle_set_limit_fsm(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id, text="–ü—Ä–∏–Ω—è—Ç–æ!")

    try:
        selected_limit = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.delete_state(user_id, chat_id)
        return

    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –¢–µ–ø–µ—Ä—å 'final_candidates' –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∏–ª—å–º—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏—Ö –Ω–∞—à–ª–∞
        movies_to_display = state_data.get('final_candidates', [])

        if not movies_to_display:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            bot.delete_state(user_id, chat_id)
            return

        display_movies = movies_to_display[:selected_limit]

        if not display_movies:
            bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ª–∏–º–∏—Ç—É.")
            bot.delete_state(user_id, chat_id)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
        send_movie_list_and_ask_selection(chat_id, user_id, display_movies)

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_movie_index_"), state="*") # –°—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–û–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è
def handle_movie_selection_fsm(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id) # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫

    try:
        selected_index = int(call.data.split("_")[3])
    except (IndexError, ValueError) as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.delete_state(user_id, chat_id)
        return

    with bot.retrieve_data(user_id, chat_id) as data:
        films = data.get('current_movie_list') # –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞

        if not films or selected_index >= len(films):
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã–±–æ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            bot.delete_state(user_id, chat_id)
            return

        film = films[selected_index]
        poster = film.get("poster", {}).get("url", "‚Äî")
        msg = msg_generator(film)


        try:
            bot.send_photo(chat_id, photo=poster, caption=msg, parse_mode="Markdown")
            bot.answer_callback_query(
                call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}"
            )
            add_to_history(user_id, film)
        except ApiHTTPException:
            bot.answer_callback_query(
                call.id,
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}\n"
                     f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä",
            )
            bot.send_message(chat_id, msg, parse_mode="Markdown")
        finally:
            bot.delete_state(user_id, chat_id) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞

# –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
def send_movie_list_and_ask_selection(chat_id, user_id, movies_to_display):
    if not movies_to_display:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç.")
        bot.delete_state(user_id, chat_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
    with bot.retrieve_data(user_id, chat_id) as state_data:
        state_data['current_movie_list'] = movies_to_display

    text = "\n".join(
        [f"{i+1}. {film['name']} ({film.get('year', '‚Äî')})" for i, film in enumerate(movies_to_display)]
    )
    # –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ—Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –æ–∂–∏–¥–∞–µ—à—å –≤ handle_movie_selection_fsm
    markup = list_keyboard(movies_to_display, "select_movie_index_") # –ò–∑–º–µ–Ω–∏–ª –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.message_handler(state=CommonStates.waiting_for_genre_name)
def filter_movies_by_genre(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    input_genre = message.text.strip().lower()

    with bot.retrieve_data(user_id, chat_id) as state_data:
        found_movies = state_data.get("found_movies", [])

        if not found_movies:
            bot.send_message(
                chat_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            )
            bot.delete_state(user_id, chat_id)
            return

        if input_genre == "-":
            bot.send_message(
                chat_id,
                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ 10 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
            )
            movie = found_movies[0]
            poster = movie.get("poster", {}).get("url", "‚Äî")
            msg = msg_generator(movie)
            try:
                bot.send_photo(
                    chat_id, photo=poster, caption=msg, parse_mode="Markdown"
                )
            except ApiTelegramException:
                bot.reply_to(chat_id, msg, parse_mode="Markdown")

            add_to_history(user_id, movie)
            bot.delete_state(user_id, chat_id)
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä—É
        filtered_movies = []
        for movie in found_movies:
            genres = movie.get("genres", [])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä –≤ —Å–ø–∏—Å–∫–µ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞
            if any(g.get("name", "").lower() == input_genre for g in genres):
                filtered_movies.append(movie)

        if filtered_movies:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            state_data["current_movie_list"] = (
                filtered_movies  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –≤—ã–±–æ—Ä–∞
            )

            message_text = f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_movies)} —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ {input_genre}"

            state_data['final_candidates'] = filtered_movies


            markup = movie_limit_markup()
            bot.send_message(chat_id, f"{message_text}\n–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=markup)
            bot.set_state(user_id, CommonStates.waiting_for_limit, chat_id)
        else:
            bot.send_message(
                chat_id,
                f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ '{input_genre}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            )
            bot.delete_state(user_id, chat_id)

# -----------------------------------------------------------------------------------


@bot.message_handler(commands=["start"])
def handle_start(message):
    welcome = add_user(message)

    bot.send_message(message.chat.id, welcome)
    set_default_commands(bot)

@bot.message_handler(commands=["movie_search"])
def handle_movie_search(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    bot.set_state(
        message.from_user.id, MovieSearchStates.waiting_for_movie_name, message.chat.id
    )


@bot.message_handler(state=MovieSearchStates.waiting_for_movie_name)
def movie_searcher(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    movie_name = message.text.strip()

    query_params = {"query": movie_name}
    data = requester(True, query_params)
    films_found = data["docs"]
    with bot.retrieve_data(user_id, chat_id) as state_data:
        state_data["found_movies"] = films_found

    if "docs" in data and data["docs"]:
        if len(films_found) > 1:
            bot.send_message(
                chat_id,
                f"–ù–∞–π–¥–µ–Ω–æ {len(films_found)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{movie_name}'.\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∂–∞–Ω—Ä—É? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' –∏–ª–∏ '–∫–æ–º–µ–¥–∏—è').\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º.",
            )
            bot.set_state(user_id, CommonStates.waiting_for_genre_name, chat_id)
        else:
            movie = films_found[0]
            poster = movie.get("poster", {}).get("url", "‚Äî")
            msg = msg_generator(movie)
            try:
                bot.send_photo(
                    chat_id, photo=poster, caption=msg, parse_mode="Markdown"
                )
            except ApiTelegramException:
                bot.reply_to(chat_id, msg, parse_mode="Markdown")

            add_to_history(user_id, movie)
            bot.delete_state(user_id, chat_id)
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(chat_id, msg, parse_mode="Markdown")
        bot.delete_state(user_id, chat_id)






# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /movie_by_rating –∏ –≤—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã
@bot.message_handler(commands=["movie_by_rating"])
def handle_movie_by_rating(message):
    markup = choose_system_keyboard()
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è:", reply_markup=markup
    )


# –ö–æ–ª–±—ç–∫-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in ["rating_kp", "rating_imdb"])
def rating_callback_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    with bot.retrieve_data(user_id, chat_id) as data:
        data["rating_type"] = call.data

    if call.data == "rating_kp":
        bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Kinopoisk. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ üîç")
        bot.set_state(user_id, RatingSearchStates.waiting_for_rating_value_kp, chat_id)
    elif call.data == "rating_imdb":
        bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ IMDB. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ üîç")
        bot.set_state(
            user_id, RatingSearchStates.waiting_for_rating_value_imdb, chat_id
        )


# –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 10 —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è kp
@bot.message_handler(state=RatingSearchStates.waiting_for_rating_value_kp)
def fetch_movies_by_kp_rating(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        rating = float(message.text)
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.1)."
        )
        return

    params = {
        "sortField": "rating.kp",
        "sortType": 1,
        "rating.kp": f"{rating}-10",
    }
    data = requester(False, params)
    films = data["docs"]
    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        state_data["found_movies"] = films

    if "docs" in data and data["docs"]:
        if len(films) > 1:
            bot.send_message(
                chat_id,
                f"–ù–∞–π–¥–µ–Ω–æ {len(films)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∂–∞–Ω—Ä—É? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' –∏–ª–∏ '–∫–æ–º–µ–¥–∏—è').\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º.",
            )
            bot.set_state(user_id, CommonStates.waiting_for_genre_name, chat_id)
        else:
            movie = films[0]
            poster = movie.get("poster", {}).get("url", "‚Äî")
            msg = msg_generator(movie)
            try:
                bot.send_photo(
                    chat_id, photo=poster, caption=msg, parse_mode="Markdown"
                )
            except ApiTelegramException:
                bot.reply_to(chat_id, msg, parse_mode="Markdown")

            add_to_history(user_id, movie)
            bot.delete_state(user_id, chat_id)
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(chat_id, msg, parse_mode="Markdown")
        bot.delete_state(user_id, chat_id)



# –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ 10 —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è imdb
@bot.message_handler(state=RatingSearchStates.waiting_for_rating_value_imdb)
def fetch_movies_by_imdb_rating(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        rating = float(message.text)
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.1)."
        )
        return

    params = {
        "sortField": "rating.imdb",
        "sortType": 1,
        "rating.imdb": f"{rating}-10",
    }
    data = requester(False, params)
    films = data["docs"]
    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        state_data["found_movies"] = films

    if "docs" in data and data["docs"]:
        if len(films) > 1:
            bot.send_message(
                chat_id,
                f"–ù–∞–π–¥–µ–Ω–æ {len(films)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∂–∞–Ω—Ä—É? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' –∏–ª–∏ '–∫–æ–º–µ–¥–∏—è').\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º.",
            )
            bot.set_state(user_id, CommonStates.waiting_for_genre_name, chat_id)
        else:
            movie = films[0]
            poster = movie.get("poster", {}).get("url", "‚Äî")
            msg = msg_generator(movie)
            try:
                bot.send_photo(
                    chat_id, photo=poster, caption=msg, parse_mode="Markdown"
                )
            except ApiTelegramException:
                bot.reply_to(chat_id, msg, parse_mode="Markdown")

            add_to_history(user_id, movie)
            bot.delete_state(user_id, chat_id)
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(chat_id, msg, parse_mode="Markdown")
        bot.delete_state(user_id, chat_id)


@bot.message_handler(commands=["low_budget_movie"])
def handle_low_budget_movie(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç:")
    bot.set_state(
        message.from_user.id, BudgetSearchStates.waiting_for_max_budget, message.chat.id
    )


@bot.message_handler(state=BudgetSearchStates.waiting_for_max_budget)
def low_budget_movie(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        budget = int(message.text)
        if budget < 1000 or budget > 6666666:
            bot.send_message(
                message.chat.id, "–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1000-6666666"
            )
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6000)."
        )
        return
    params = {
        "sortField": "budget.value",
        "sortType": 1,
        "budget.value": f"1000-{budget}",
    }
    data = requester(False, params)
    films = data["docs"]
    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        state_data["found_movies"] = films

    if "docs" in data and data["docs"]:
        if len(films) > 1:
            bot.send_message(
                chat_id,
                f"–ù–∞–π–¥–µ–Ω–æ {len(films)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∂–∞–Ω—Ä—É? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' –∏–ª–∏ '–∫–æ–º–µ–¥–∏—è').\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º.",
            )
            bot.set_state(user_id, CommonStates.waiting_for_genre_name, chat_id)
        else:
            movie = films[0]
            poster = movie.get("poster", {}).get("url", "‚Äî")
            msg = msg_generator(movie)
            try:
                bot.send_photo(
                    chat_id, photo=poster, caption=msg, parse_mode="Markdown"
                )
            except ApiTelegramException:
                bot.reply_to(chat_id, msg, parse_mode="Markdown")

            add_to_history(user_id, movie)
            bot.delete_state(user_id, chat_id)
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(chat_id, msg, parse_mode="Markdown")
        bot.delete_state(user_id, chat_id)


@bot.message_handler(commands=["high_budget_movie"])
def handle_high_budget_movie(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç:")
    bot.set_state(
        message.from_user.id, BudgetSearchStates.waiting_for_min_budget, message.chat.id
    )


@bot.message_handler(state=BudgetSearchStates.waiting_for_min_budget)
def high_budget_movie(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        budget = int(message.text)
        if budget < 1000 or budget > 6666666:
            bot.send_message(
                message.chat.id, "–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1000-6666666"
            )
    except ValueError:
        bot.send_message(
            message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6000)."
        )
        return

    params = {
        "sortField": "budget.value",
        "sortType": -1,
        "budget.value": f"{budget}-6666666",
    }
    data = requester(False, params)
    films = data["docs"]
    with bot.retrieve_data(user_id, chat_id) as state_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        state_data["found_movies"] = films

    if "docs" in data and data["docs"]:
        if len(films) > 1:
            bot.send_message(
                chat_id,
                f"–ù–∞–π–¥–µ–Ω–æ {len(films)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∂–∞–Ω—Ä—É? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' –∏–ª–∏ '–∫–æ–º–µ–¥–∏—è').\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º.",
            )
            bot.set_state(user_id, CommonStates.waiting_for_genre_name, chat_id)
        else:
            movie = films[0]
            poster = movie.get("poster", {}).get("url", "‚Äî")
            msg = msg_generator(movie)
            try:
                bot.send_photo(
                    chat_id, photo=poster, caption=msg, parse_mode="Markdown"
                )
            except ApiTelegramException:
                bot.reply_to(chat_id, msg, parse_mode="Markdown")

            add_to_history(user_id, movie)
            bot.delete_state(user_id, chat_id)
    else:
        msg = "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        bot.reply_to(chat_id, msg, parse_mode="Markdown")
        bot.delete_state(user_id, chat_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("budget_movie_"))
def handle_budget_movie_selection(call):
    try:
        selected_index = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    with bot.retrieve_data(user_id, chat_id) as data:
        films = data.get('current_movie_list')

    if not films or selected_index >= len(films):
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    film = films[selected_index]

    poster = film.get("poster", {}).get("url", "‚Äî")
    msg = msg_generator(film)

    add_to_history(user_id, film)
    try:
        bot.send_photo(chat_id, photo=poster, caption=msg, parse_mode="Markdown")
        bot.answer_callback_query(
            call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}"
        )
    except ApiTelegramException:
        bot.answer_callback_query(
            call.id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º ‚Ññ{selected_index + 1}\n"
            f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä",
        )
        bot.send_message(chat_id, msg, parse_mode="Markdown")
    finally:
        bot.delete_state(user_id, chat_id)


@bot.message_handler(commands=["history"])
def handle_history_command(message):
    user_id = message.from_user.id

    history = show_history(user_id)

    if not history:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ chat_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    history_data[message.chat.id] = history

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
    text_lines = []
    for i, record in enumerate(history, start=1):
        text_lines.append(
            f"–ó–∞–ø—Ä–æ—Å –æ—Ç {record.data.strftime('%Y-%m-%d %H:%M')}\n"
            f"{i}. {record.title} ({record.year})"
        )
    text = "\n\n".join(text_lines)

    # –ö–Ω–æ–ø–∫–∏ –æ—Ç 1 –¥–æ 10
    markup = list_keyboard(history, "history_movie_")

    bot.send_message(
        message.chat.id,
        f"üìú *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n{text}",
        parse_mode="Markdown",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("history_movie_"))
def handle_history_movie_detail(call):
    chat_id = call.message.chat.id
    try:
        index = int(call.data.split("_")[-1])
        selected_record = history_data.get(chat_id, [])[index]
    except (IndexError, ValueError, TypeError):
        bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.")
        return

    # –¢–∞–∫ –∫–∞–∫ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏—à—å —Ä–∞–∑ —è –Ω–µ —Å—Ç–ª–∞ –¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    msg = (
        f"üóì *{selected_record.data.strftime('%Y-%m-%d %H:%M')}*\n"
        f"üé¨ *{selected_record.title}* ({selected_record.year})\n\n"
        f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{selected_record.description}\n\n"
        f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
        f"   ‚îî –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {selected_record.rating_kp or '‚Äî'}\n"
        f"   ‚îî IMDB: {selected_record.rating_imdb or '‚Äî'}\n"
        f"üé≠ *–ñ–∞–Ω—Ä—ã:* {selected_record.genres or '‚Äî'}\n"
        f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {selected_record.age_rate or '‚Äî'}"
    )

    try:
        bot.send_photo(
            chat_id, photo=selected_record.poster, caption=msg, parse_mode="Markdown"
        )
    except ApiTelegramException as e:
        bot.send_message(chat_id, msg, parse_mode="Markdown")

    bot.answer_callback_query(call.id)


@bot.message_handler(commands=["help"])
def handle_help(message):
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:")
    bot.send_message(
        message.chat.id, "\n".join(f"{cmd} ‚Äî {desc}" for cmd, desc in DEFAULT_COMMANDS)
    )


# @bot.message_handler(commands=["history"])
# def handle_history_command(message):
#     user_id = message.from_user.id
#     chat_id = message.chat.id
#
#     history = show_history(user_id)
#
#     if not history:
#         bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
#         return
#
#     with bot.retrieve_data(user_id, chat_id) as state_data:
#         state_data['history_records_for_user'] = history # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª—é—á
#
#     text_lines = []
#     for i, record in enumerate(history, start=1):
#         text_lines.append(
#             f"–ó–∞–ø—Ä–æ—Å –æ—Ç {record.data.strftime('%Y-%m-%d %H:%M')}\n"
#             f"{i}. {record.title} ({record.year})"
#         )
#     text = "\n\n".join(text_lines)
#
#     # –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ callback_data
#     # "history_movie_detail" - —ç—Ç–æ –Ω–∞—à –ø—Ä–µ—Ñ–∏–∫—Å
#     markup = list_keyboard(history, "history_movie_detail")
#
#     bot.send_message(
#         chat_id,
#         f"üìú *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n{text}",
#         parse_mode="Markdown",
#         reply_markup=markup,
#     )
#     bot.set_state(user_id, HistoryStates.main)
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith("history_movie_detail"), state=HistoryStates.main)
# def handle_history_movie_detail(call):
#     chat_id = call.message.chat.id
#     user_id = call.from_user.id
#     bot.answer_callback_query(call.id)  # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
#
#     try:
#         # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "history_movie_detail0", "history_movie_detail1", ...
#         prefix = "history_movie_detail"
#
#         if not call.data.startswith(prefix) or len(call.data) <= len(prefix):
#             raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏.")
#
#         index_str = call.data[len(prefix):]
#         index = int(index_str)
#
#         with bot.retrieve_data(user_id, chat_id) as state_data:
#             history_list = state_data.get('history_records_for_user', [])
#
#             if not history_list or index < 0 or index >= len(history_list):
#                 raise IndexError("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
#
#             selected_record = history_list[index]  # <-- selected_record –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–¥–µ—Å—å
#
#             # --- –í–µ—Å—å –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π selected_record, –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Å—é–¥–∞ ---
#             msg = (
#                 f"üóì *–ó–∞–ø—Ä–æ—Å –æ—Ç: {selected_record.data.strftime('%Y-%m-%d %H:%M')}*\n"
#                 f"üé¨ *{selected_record.title}* ({selected_record.year})\n\n"
#                 f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{selected_record.description}\n\n"
#                 f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*\n"
#                 f"   ‚îî –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {selected_record.rating_kp or '‚Äî'}\n"
#                 f"   ‚îî IMDB: {selected_record.rating_imdb or '‚Äî'}\n"
#                 f"üé≠ *–ñ–∞–Ω—Ä—ã:* {selected_record.genres or '‚Äî'}\n"
#                 f"üîû *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:* {selected_record.age_rate or '‚Äî'}"
#             )
#
#             try:
#                 bot.send_photo(
#                     chat_id, photo=selected_record.poster, caption=msg, parse_mode="Markdown"
#                 )
#             except ApiTelegramException as e:
#                 print(f"DEBUG: Telegram API Error sending photo for history: {e}")
#                 bot.send_message(chat_id, msg, parse_mode="Markdown")
#
#             # bot.answer_callback_query(call.id) # –£–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤—ã—à–µ
#             bot.delete_state(user_id, chat_id)
#
#     except (IndexError, ValueError, TypeError) as e:
#         print(f"DEBUG: Error in handle_history_movie_detail: {e}")
#         bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         # bot.delete_state(user_id, chat_id) # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
#         return


# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã


@bot.message_handler(commands=["help"])
def handle_help(message):
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:")
    bot.send_message(
        message.chat.id, "\n".join(f"{cmd} ‚Äî {desc}" for cmd, desc in DEFAULT_COMMANDS)
    )

